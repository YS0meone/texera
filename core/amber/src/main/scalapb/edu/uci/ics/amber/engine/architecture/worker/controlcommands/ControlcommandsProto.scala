// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.worker.controlcommands

object ControlcommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.architecture.sendsemantics.partitionings.PartitioningsProto,
    edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto,
    com.google.protobuf.timestamp.TimestampProto,
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.StartWorkerV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.PauseWorkerV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ResumeWorkerV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.SchedulerTimeSlotEventV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.OpenOperatorV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.UpdateInputLinkingV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.AddPartitioningV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.WorkerExecutionCompletedV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.QueryStatisticsV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.QueryCurrentInputTupleV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.LocalOperatorExceptionV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.LinkOrdinal,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.InitializeOperatorLogicV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ModifyOperatorLogicV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ReplayCurrentTupleV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.PythonConsoleMessageV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.EvaluateExpressionV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.WorkerDebugCommandV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.QuerySelfWorkloadMetricsV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.LinkCompletedV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.BackpressureV2,
      edu.uci.ics.amber.engine.architecture.worker.controlcommands.ControlCommandV2Message
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CkJlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3dvcmtlci9jb250cm9sY29tbWFuZHMucHJvdG8SLGVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyGkdlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0Z
  WN0dXJlL3NlbmRzZW1hbnRpY3MvcGFydGl0aW9uaW5ncy5wcm90bxo1ZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi92a
  XJ0dWFsaWRlbnRpdHkucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aFXNjYWxhcGIvc2NhbGFwYi5wcm90b
  yIPCg1TdGFydFdvcmtlclYyIg8KDVBhdXNlV29ya2VyVjIiEAoOUmVzdW1lV29ya2VyVjIiXAoYU2NoZWR1bGVyVGltZVNsb3RFd
  mVudFYyEkAKEXRpbWVfc2xvdF9leHBpcmVkGAEgASgIQhTiPxESD3RpbWVTbG90RXhwaXJlZFIPdGltZVNsb3RFeHBpcmVkIhAKD
  k9wZW5PcGVyYXRvclYyIuIBChRVcGRhdGVJbnB1dExpbmtpbmdWMhJpCgppZGVudGlmaWVyGAEgASgLMjUuZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1YWxJZGVudGl0eUIS4j8PEgppZGVudGlmaWVy8AEBUgppZGVudGlmaWVyEl8KC
  mlucHV0X2xpbmsYAiABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkxpbmtJZGVudGl0eUIR4j8OEglpbnB1d
  ExpbmvwAQFSCWlucHV0TGluayLeAQoRQWRkUGFydGl0aW9uaW5nVjISTAoDdGFnGAEgASgLMi0uZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5MaW5rSWRlbnRpdHlCC+I/CBIDdGFn8AEBUgN0YWcSewoMcGFydGl0aW9uaW5nGAIgASgLMkEuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5zZW5kc2VtYW50aWNzLlBhcnRpdGlvbmluZ0IU4j8REgxwYXJ0aXRpb25pb
  mfwAQFSDHBhcnRpdGlvbmluZyIcChpXb3JrZXJFeGVjdXRpb25Db21wbGV0ZWRWMiITChFRdWVyeVN0YXRpc3RpY3NWMiIaChhRd
  WVyeUN1cnJlbnRJbnB1dFR1cGxlVjIiQgoYTG9jYWxPcGVyYXRvckV4Y2VwdGlvblYyEiYKB21lc3NhZ2UYASABKAlCDOI/CRIHb
  WVzc2FnZVIHbWVzc2FnZSKaAQoLTGlua09yZGluYWwSVgoHbGlua19pZBgBIAEoCzItLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5jb21tb24uTGlua0lkZW50aXR5Qg7iPwsSBmxpbmtJZPABAVIGbGlua0lkEjMKDHBvcnRfb3JkaW5hbBgCIAEoA0IQ4j8NEgtwb
  3J0T3JkaW5hbFILcG9ydE9yZGluYWwi6AQKGUluaXRpYWxpemVPcGVyYXRvckxvZ2ljVjISHQoEY29kZRgBIAEoCUIJ4j8GEgRjb
  2RlUgRjb2RlEioKCWlzX3NvdXJjZRgCIAEoCEIN4j8KEghpc1NvdXJjZVIIaXNTb3VyY2UShwEKFWlucHV0X29yZGluYWxfbWFwc
  GluZxgDIAMoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLkxpbmtPcmRpbmFsQhjiPxUSE
  2lucHV0T3JkaW5hbE1hcHBpbmdSE2lucHV0T3JkaW5hbE1hcHBpbmcSigEKFm91dHB1dF9vcmRpbmFsX21hcHBpbmcYBCADKAsyO
  S5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5MaW5rT3JkaW5hbEIZ4j8WEhRvdXRwdXRPcmRpb
  mFsTWFwcGluZ1IUb3V0cHV0T3JkaW5hbE1hcHBpbmcSkQEKDW91dHB1dF9zY2hlbWEYBSADKAsyWS5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5Jbml0aWFsaXplT3BlcmF0b3JMb2dpY1YyLk91dHB1dFNjaGVtYUVudHJ5QhHiP
  w4SDG91dHB1dFNjaGVtYVIMb3V0cHV0U2NoZW1hGlUKEU91dHB1dFNjaGVtYUVudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA
  2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBImIKFU1vZGlmeU9wZXJhdG9yTG9naWNWMhIdCgRjb2RlG
  AEgASgJQgniPwYSBGNvZGVSBGNvZGUSKgoJaXNfc291cmNlGAIgASgIQg3iPwoSCGlzU291cmNlUghpc1NvdXJjZSIWChRSZXBsY
  XlDdXJyZW50VHVwbGVWMiLbAQoWUHl0aG9uQ29uc29sZU1lc3NhZ2VWMhJLCgl0aW1lc3RhbXAYASABKAsyGi5nb29nbGUucHJvd
  G9idWYuVGltZXN0YW1wQhHiPw4SCXRpbWVzdGFtcPABAVIJdGltZXN0YW1wEicKCG1zZ190eXBlGAIgASgJQgziPwkSB21zZ1R5c
  GVSB21zZ1R5cGUSIwoGc291cmNlGAMgASgJQgviPwgSBnNvdXJjZVIGc291cmNlEiYKB21lc3NhZ2UYBCABKAlCDOI/CRIHbWVzc
  2FnZVIHbWVzc2FnZSJHChRFdmFsdWF0ZUV4cHJlc3Npb25WMhIvCgpleHByZXNzaW9uGAEgASgJQg/iPwwSCmV4cHJlc3Npb25SC
  mV4cHJlc3Npb24iMgoUV29ya2VyRGVidWdDb21tYW5kVjISGgoDY21kGAEgASgJQgjiPwUSA2NtZFIDY21kIhwKGlF1ZXJ5U2VsZ
  ldvcmtsb2FkTWV0cmljc1YyImkKD0xpbmtDb21wbGV0ZWRWMhJWCgdsaW5rX2lkGAEgASgLMi0uZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5MaW5rSWRlbnRpdHlCDuI/CxIGbGlua0lk8AEBUgZsaW5rSWQiWgoOQmFja3ByZXNzdXJlVjISSAoTZW5hY
  mxlX2JhY2twcmVzc3VyZRgBIAEoCEIX4j8UEhJlbmFibGVCYWNrcHJlc3N1cmVSEmVuYWJsZUJhY2twcmVzc3VyZSLRFgoQQ29ud
  HJvbENvbW1hbmRWMhJyCgxzdGFydF93b3JrZXIYASABKAsyOy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlL
  ndvcmtlci5TdGFydFdvcmtlclYyQhDiPw0SC3N0YXJ0V29ya2VySABSC3N0YXJ0V29ya2VyEnIKDHBhdXNlX3dvcmtlchgCIAEoC
  zI7LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLlBhdXNlV29ya2VyVjJCEOI/DRILcGF1c2VXb
  3JrZXJIAFILcGF1c2VXb3JrZXISdgoNcmVzdW1lX3dvcmtlchgDIAEoCzI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoa
  XRlY3R1cmUud29ya2VyLlJlc3VtZVdvcmtlclYyQhHiPw4SDHJlc3VtZVdvcmtlckgAUgxyZXN1bWVXb3JrZXISggEKEGFkZF9wY
  XJ0aXRpb25pbmcYBCABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5BZGRQYXJ0aXRpb
  25pbmdWMkIU4j8REg9hZGRQYXJ0aXRpb25pbmdIAFIPYWRkUGFydGl0aW9uaW5nEo8BChR1cGRhdGVfaW5wdXRfbGlua2luZxgFI
  AEoCzJCLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLlVwZGF0ZUlucHV0TGlua2luZ1YyQhfiP
  xQSEnVwZGF0ZUlucHV0TGlua2luZ0gAUhJ1cGRhdGVJbnB1dExpbmtpbmcSggEKEHF1ZXJ5X3N0YXRpc3RpY3MYBiABKAsyPy5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5RdWVyeVN0YXRpc3RpY3NWMkIU4j8REg9xdWVyeVN0Y
  XRpc3RpY3NIAFIPcXVlcnlTdGF0aXN0aWNzEqABChlxdWVyeV9jdXJyZW50X2lucHV0X3R1cGxlGAcgASgLMkYuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuUXVlcnlDdXJyZW50SW5wdXRUdXBsZVYyQhviPxgSFnF1ZXJ5Q3Vyc
  mVudElucHV0VHVwbGVIAFIWcXVlcnlDdXJyZW50SW5wdXRUdXBsZRKfAQoYbG9jYWxfb3BlcmF0b3JfZXhjZXB0aW9uGAggASgLM
  kYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuTG9jYWxPcGVyYXRvckV4Y2VwdGlvblYyQhviP
  xgSFmxvY2FsT3BlcmF0b3JFeGNlcHRpb25IAFIWbG9jYWxPcGVyYXRvckV4Y2VwdGlvbhJ2Cg1vcGVuX29wZXJhdG9yGAkgASgLM
  jwuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuT3Blbk9wZXJhdG9yVjJCEeI/DhIMb3Blbk9wZ
  XJhdG9ySABSDG9wZW5PcGVyYXRvchJ6Cg5saW5rX2NvbXBsZXRlZBgKIAEoCzI9LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hc
  mNoaXRlY3R1cmUud29ya2VyLkxpbmtDb21wbGV0ZWRWMkIS4j8PEg1saW5rQ29tcGxldGVkSABSDWxpbmtDb21wbGV0ZWQSoAEKG
  XNjaGVkdWxlcl90aW1lX3Nsb3RfZXZlbnQYCyABKAsyRi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvc
  mtlci5TY2hlZHVsZXJUaW1lU2xvdEV2ZW50VjJCG+I/GBIWc2NoZWR1bGVyVGltZVNsb3RFdmVudEgAUhZzY2hlZHVsZXJUaW1lU
  2xvdEV2ZW50EqMBChlpbml0aWFsaXplX29wZXJhdG9yX2xvZ2ljGBUgASgLMkcuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY
  2hpdGVjdHVyZS53b3JrZXIuSW5pdGlhbGl6ZU9wZXJhdG9yTG9naWNWMkIc4j8ZEhdpbml0aWFsaXplT3BlcmF0b3JMb2dpY0gAU
  hdpbml0aWFsaXplT3BlcmF0b3JMb2dpYxKTAQoVbW9kaWZ5X29wZXJhdG9yX2xvZ2ljGBYgASgLMkMuZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuTW9kaWZ5T3BlcmF0b3JMb2dpY1YyQhjiPxUSE21vZGlmeU9wZXJhdG9yTG9na
  WNIAFITbW9kaWZ5T3BlcmF0b3JMb2dpYxKXAQoWcHl0aG9uX2NvbnNvbGVfbWVzc2FnZRgXIAEoCzJELmVkdS51Y2kuaWNzLmFtY
  mVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLlB5dGhvbkNvbnNvbGVNZXNzYWdlVjJCGeI/FhIUcHl0aG9uQ29uc29sZU1lc
  3NhZ2VIAFIUcHl0aG9uQ29uc29sZU1lc3NhZ2USjwEKFHJlcGxheV9jdXJyZW50X3R1cGxlGBggASgLMkIuZWR1LnVjaS5pY3MuY
  W1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuUmVwbGF5Q3VycmVudFR1cGxlVjJCF+I/FBIScmVwbGF5Q3VycmVudFR1c
  GxlSABSEnJlcGxheUN1cnJlbnRUdXBsZRKOAQoTZXZhbHVhdGVfZXhwcmVzc2lvbhgZIAEoCzJCLmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLkV2YWx1YXRlRXhwcmVzc2lvblYyQhfiPxQSEmV2YWx1YXRlRXhwcmVzc2lvbkgAU
  hJldmFsdWF0ZUV4cHJlc3Npb24SqAEKG3F1ZXJ5X3NlbGZfd29ya2xvYWRfbWV0cmljcxgpIAEoCzJILmVkdS51Y2kuaWNzLmFtY
  mVyLmVuZ2luZS5hcmNoaXRlY3R1cmUud29ya2VyLlF1ZXJ5U2VsZldvcmtsb2FkTWV0cmljc1YyQh3iPxoSGHF1ZXJ5U2VsZldvc
  mtsb2FkTWV0cmljc0gAUhhxdWVyeVNlbGZXb3JrbG9hZE1ldHJpY3MSdQoMYmFja3ByZXNzdXJlGDMgASgLMjwuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuQmFja3ByZXNzdXJlVjJCEeI/DhIMYmFja3ByZXNzdXJlSABSDGJhY
  2twcmVzc3VyZRKPAQoUd29ya2VyX2RlYnVnX2NvbW1hbmQYUSABKAsyQi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0Z
  WN0dXJlLndvcmtlci5Xb3JrZXJEZWJ1Z0NvbW1hbmRWMkIX4j8UEhJ3b3JrZXJEZWJ1Z0NvbW1hbmRIAFISd29ya2VyRGVidWdDb
  21tYW5kEqcBChp3b3JrZXJfZXhlY3V0aW9uX2NvbXBsZXRlZBhlIAEoCzJILmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoa
  XRlY3R1cmUud29ya2VyLldvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZFYyQh3iPxoSGHdvcmtlckV4ZWN1dGlvbkNvbXBsZXRlZEgAU
  hh3b3JrZXJFeGVjdXRpb25Db21wbGV0ZWRCDgoMc2VhbGVkX3ZhbHVlQgniPwZIAFgAeAFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.architecture.sendsemantics.partitionings.PartitioningsProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.virtualidentity.VirtualidentityProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}