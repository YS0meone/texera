syntax = "proto3";

package edu.uci.ics.texera.web;

import "edu/uci/ics/amber/engine/architecture/worker/controlcommands.proto";
import "edu/uci/ics/amber/engine/architecture/worker/controlreturns.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  scope: FILE,
  preserve_unknown_fields: false
  no_default_values_in_constructor: false
};

enum FatalErrorType{
  COMPILATION_ERROR = 0;
  EXECUTION_FAILURE = 1;
}

enum WorkflowAggregatedState {
  UNINITIALIZED = 0;
  READY = 1;
  RUNNING = 2;
  PAUSING = 3;
  PAUSED = 4;
  RESUMING = 5;
  COMPLETED = 6;
  FAILED = 7;
  UNKNOWN = 8;
  KILLED = 9;
}


message BreakpointFault{
  message BreakpointTuple{
    int64 id = 1;
    bool is_input = 2;
    repeated string tuple = 3;
  }

  string worker_name = 1;
  BreakpointTuple faulted_tuple = 2;
}

message OperatorBreakpoints{
  repeated BreakpointFault unresolved_breakpoints = 1;
}

message JobBreakpointStore{
  map<string, OperatorBreakpoints> operator_info = 1;
}

message EvaluatedValueList{
  repeated amber.engine.architecture.worker.EvaluatedValue values = 1;
}

message OperatorConsole{
  repeated amber.engine.architecture.worker.ConsoleMessage console_messages = 1;
  map<string, EvaluatedValueList> evaluate_expr_results = 2;
}

message JobConsoleStore{
  map<string, OperatorConsole> operator_console = 1;
}

message OperatorWorkerMapping{
  string operatorId = 1;
  repeated string workerIds = 2;
}

message OperatorRuntimeStats{
  WorkflowAggregatedState state = 1;
  int64 input_count = 2;
  int64 output_count = 3;
}

message JobStatsStore {
  int64 startTimeStamp = 1;
  int64 endTimeStamp = 2;
  map<string, OperatorRuntimeStats> operator_info = 3;
  repeated OperatorWorkerMapping operator_worker_mapping = 4;
}


message WorkflowFatalError {
  FatalErrorType type = 1;
  google.protobuf.Timestamp timestamp = 2 [(scalapb.field).no_box = true];
  string message = 3;
  string details = 4;
  string operatorId = 5;
  string workerId = 6;
}

message JobMetadataStore{
  WorkflowAggregatedState state = 1;
  repeated WorkflowFatalError fatal_errors = 2;
  int64 eid = 3;
  bool is_recovering = 4;
}
